Longest Common Subsequence 

Test case :-
X: ABCBDAB
Y: BDCABA
 
The length of the LCS is 4
LCS are BDAB, BCAB, and BCBA

/* Dynamic Programming Java implementation of LCS problem */
public class LongestCommonSubsequence
{
 
/* Returns length of LCS for X[0..m-1], Y[0..n-1] */
int lcs( char[] X, char[] Y, int m, int n )
{
    int L[][] = new int[m+1][n+1];
 
    /* Following steps build L[m+1][n+1] in bottom up fashion. Note
        that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1] */
    for (int i=0; i<=m; i++)
    {
    for (int j=0; j<=n; j++)
    {
        if (i == 0 || j == 0)
            L[i][j] = 0;
        else if (X[i-1] == Y[j-1])
            L[i][j] = L[i-1][j-1] + 1;
        else
            L[i][j] = max(L[i-1][j], L[i][j-1]);
    }
    }
return L[m][n];
}
 
/* Utility function to get max of 2 integers */
int max(int a, int b)
{
    return (a > b)? a : b;
}
 
public static void main(String[] args)
{
    LongestCommonSubsequence lcs = new LongestCommonSubsequence();
    String s1 = "AGGTAB";
    String s2 = "GXTXAYB";
 
    char[] X=s1.toCharArray();
    char[] Y=s2.toCharArray();
    int m = X.length;
    int n = Y.length;
 
    System.out.println("Length of LCS is" + " " +
                                lcs.lcs( X, Y, m, n ) );
}
 
}
 
// This Code is Contributed by Saket Kumar

----------------------------------------------------

Longest common substring 



class Main
{
    // Function to find the longest common substring of sequences
    // `X[0…m-1]` and `Y[0…n-1]`
    public static String LCS(String X, String Y, int m, int n)
    {
        int maxlen = 0;         // stores the max length of LCS
        int endingIndex = m;    // stores the ending index of LCS in `X`
 
        // `lookup[i][j]` stores the length of LCS of substring
        // `X[0…i-1]`, `Y[0…j-1]`
        int[][] lookup = new int[m + 1][n + 1];
 
        // fill the lookup table in a bottom-up manner
        for (int i = 1; i <= m; i++)
        {
            for (int j = 1; j <= n; j++)
            {
                // if the current character of `X` and `Y` matches
                if (X.charAt(i - 1) == Y.charAt(j - 1))
                {
                    lookup[i][j] = lookup[i - 1][j - 1] + 1;
 
                    // update the maximum length and ending index
                    if (lookup[i][j] > maxlen)
                    {
                        maxlen = lookup[i][j];
                        endingIndex = i;
                    }
                }
            }
        }
 
        // return longest common substring having length `maxlen`
        return X.substring(endingIndex - maxlen, endingIndex);
    }
 
    public static void main(String[] args)
    {
        String X = "ABC", Y = "BABA";
        int m = X.length(), n = Y.length();
 
        // Find longest common substring
        System.out.print("The longest common substring is " + LCS(X, Y, m, n));
    }
}


---------------------------------------------


Given an array A, maximize value of expression (A[s] - A[r] + A[q] - A[p]), where p, q, r, and s are indices of the array and s > r > q > p.

Input:  A[] = [3, 9, 10, 1, 30, 40]
 
Output: 46
 
Explanation: The expression (40 – 1 + 10 – 3) will result in the maximum value



import java.util.Arrays;
 
class Main
{
    // Function to find the maximum value of the expression
    // (A[l] - A[k] + A[j] - A[i]), where l > k > j > i
    public static int maximizeExpression(int[] A)
    {
        // input should have at least 4 elements
        if (A.length < 4) {
            System.exit(-1);
        }
 
        // create 4 lookup tables and initialize them to `Integer.MIN_VALUE`
        int[] first = new int[A.length + 1];
        Arrays.fill(first, Integer.MIN_VALUE);
 
        int[] second = new int[A.length];
        Arrays.fill(second, Integer.MIN_VALUE);
 
        int[] third = new int[A.length - 1];
        Arrays.fill(third, Integer.MIN_VALUE);
 
        int[] fourth = new int[A.length - 2];
        Arrays.fill(fourth, Integer.MIN_VALUE);
 
        // `first[]` stores the maximum value of `A[l]`
        for (int i = A.length - 1; i >= 0; i--) {
            first[i] = Integer.max(first[i + 1], A[i]);
        }
 
        // `second[]` stores the maximum value of `A[l] - A[k]`
        for (int i = A.length - 2; i >= 0; i--) {
            second[i] = Integer.max(second[i + 1], first[i + 1] - A[i]);
        }
 
        // `third[]` stores the maximum value of `A[l] - A[k] + A[j]`
        for (int i = A.length - 3; i >= 0; i--) {
            third[i] = Integer.max(third[i + 1], second[i + 1] + A[i]);
        }
 
        // `fourth[]` stores the maximum value of `A[l] - A[k] + A[j] - A[i]`
        for (int i = A.length - 4; i >= 0; i--) {
            fourth[i] = Integer.max(fourth[i + 1], third[i + 1] - A[i]);
        }
 
        // maximum value would be present at `fourth[0]`
        return fourth[0];
    }
 
    public static void main(String[] args)
    {
        int[] A = { 3, 9, 10, 1, 30, 40 };
 
        System.out.println(maximizeExpression(A));
    }
}

---------------------------------------

Print all subarrays with 0 sum

Input:  { 4, 2, -3, -1, 0, 4 }
 
Subarrays with zero-sum are
 
{ -3, -1, 0, 4 }
{ 0 }



import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
 
class Main
{
    // Utility function to insert <key, value> into the multimap
    private static<K, V> void insert(Map<K, List<V>> hashMap, K key, V value)
    {
        // if the key is seen for the first time, initialize the list
        hashMap.putIfAbsent(key, new ArrayList<>());
        hashMap.get(key).add(value);
    }
 
    // Function to print all subarrays with a zero-sum in a given array
    public static void printAllSubarrays(int[] nums)
    {
        // create an empty multimap to store the ending index of all
        // subarrays having the same sum
        Map<Integer, List<Integer>> hashMap = new HashMap<>();
 
        // insert (0, -1) pair into the map to handle the case when
        // subarray with zero-sum starts from index 0
        insert(hashMap, 0, -1);
 
        int sum = 0;
 
        // traverse the given array
        for (int i = 0; i < nums.length; i++)
        {
            // sum of elements so far
            sum += nums[i];
 
            // if the sum is seen before, there exists at least one
            // subarray with zero-sum
            if (hashMap.containsKey(sum))
            {
                List<Integer> list = hashMap.get(sum);
 
                // find all subarrays with the same sum
                for (Integer value: list)
                {
                    System.out.println("Subarray [" + (value + 1) + "…" +
                                            i + "]");
                }
            }
 
            // insert (sum so far, current index) pair into the multimap
            insert(hashMap, sum, i);
        }
    }
 
    public static void main (String[] args)
    {
        int[] nums = { 3, 4, -7, 3, 1, 3, 1, -4, -2, -2 };
 
        printAllSubarrays(nums);
    }
}

----------------------------------------------------------------------

Find the largest subarray having an equal number of 0’s and 1’s
Given a binary array containing 0’s and 1’s, find the largest subarray with equal numbers of 0’s and 1’s.


Input:  { 0, 0, 1, 0, 1, 0, 0 }
 
Output: Largest subarray is { 0, 1, 0, 1 } or { 1, 0, 1, 0 }



import java.util.Map;
import java.util.HashMap;
 
class Main
{
    // Function to find the largest subarray having an equal number
    // of 0's and 1's
    public static void findLargestSubarray(int[] nums)
    {
        // create an empty `HashMap` to store the ending index of the first
        // subarray having some sum
        Map<Integer, Integer> map = new HashMap<>();
 
        // insert (0, -1) pair into the set to handle the case when a
        // subarray with zero-sum starts from index 0
        map.put(0, -1);
 
        // `len` stores the maximum length of subarray with zero-sum
        int len = 0;
 
        // stores ending index of the largest subarray having zero-sum
        int ending_index = -1;
 
        int sum = 0;
 
        // Traverse through the given array
        for (int i = 0; i < nums.length; i++)
        {
            // sum of elements so far (replace 0 with -1)
            sum += (nums[i] == 0)? -1: 1;
 
            // if the sum is seen before
            if (map.containsKey(sum))
            {
                // update length and ending index of largest subarray having zero-sum
                if (len < i - map.get(sum))
                {
                    len = i - map.get(sum);
                    ending_index = i;
                }
            }
            // if the sum is seen for the first time, insert the sum with its
            // index into the map
            else {
                map.put(sum, i);
            }
        }
 
        // print the subarray if present
        if (ending_index != -1)
        {
            System.out.println("[" + (ending_index - len + 1) + ", " +
                                    ending_index + "]");
        }
        else {
            System.out.println("No subarray exists");
        }
    }
 
    public static void main (String[] args)
    {
        int[] nums = { 0, 0, 1, 0, 1, 0, 0 };
 
        findLargestSubarray(nums);
    }
}

----------------------------------

Find root vertex of a graph


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
 
// A class to store a graph edge
class Edge
{
    int source, dest;
 
    public Edge(int source, int dest)
    {
        this.source = source;
        this.dest = dest;
    }
}
 
// A class to represent a graph object
class Graph
{
    // A list of lists to represent an adjacency list
    List<List<Integer>> adjList;
 
    // Constructor
    Graph(List<Edge> edges, int n)
    {
        adjList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adjList.add(new ArrayList<>());
        }
 
        // add edges to the directed graph
        for (Edge edge: edges) {
            adjList.get(edge.source).add(edge.dest);
        }
    }
}
 
class Main
{
    // Utility function to perform DFS traversal on the graph
    public static void DFS(Graph graph, int v, boolean[] discovered)
    {
        // mark the current node as discovered
        discovered[v] = true;
 
        // do for every edge (v, u)
        for (int u: graph.adjList.get(v))
        {
            // `u` is not discovered
            if (!discovered[u]) {
                DFS(graph, u, discovered);
            }
        }
    }
 
    // Function to find the root vertex of a graph
    public static int findRootVertex(Graph graph, int n)
    {
        // to keep track of all previously visited vertices in DFS
        boolean[] visited = new boolean[n];
 
        // find the last starting vertex `v` in DFS
        int v = 0;
        for (int i = 0; i < n; i++)
        {
            if (!visited[i])
            {
                DFS(graph, i, visited);
                v = i;
            }
        }
 
        // reset the visited vertices
        Arrays.fill(visited, false);
 
        // perform DFS on the graph from the last starting vertex `v`
        DFS(graph, v, visited);
 
        // return -1 if all vertices are not reachable from vertex `v`
        for (int i = 0; i < n; i++)
        {
            if (!visited[i]) {
                return -1;
            }
        }
 
        // we reach here only if `v` is a root vertex
        return v;
    }
 
    public static void main(String[] args)
    {
        // List of graph edges as per the above diagram
        List<Edge> edges = Arrays.asList(new Edge(0, 1), new Edge(1, 2),
                    new Edge(2, 3), new Edge(3, 0), new Edge(4, 3),
                    new Edge(4, 5), new Edge(5, 0));
 
        // total number of nodes in the graph (0 to 5)
        int n = 6;
 
        // build a directed graph from the given edges
        Graph graph = new Graph(edges, n);
 
        // find the root vertex in the graph
        int root = findRootVertex(graph, n);
 
        if (root != -1) {
            System.out.println("The root vertex is " + root);
        }
        else {
            System.out.println("The root vertex does not exist");
        }
    }
}

------------------------------

Breadth-First Search (BFS) 


import java.util.*;
 
// A class to store a graph edge
class Edge
{
    int source, dest;
 
    public Edge(int source, int dest)
    {
        this.source = source;
        this.dest = dest;
    }
}
 
// A class to represent a graph object
class Graph
{
    // A list of lists to represent an adjacency list
    List<List<Integer>> adjList = null;
 
    // Constructor
    Graph(List<Edge> edges, int n)
    {
        adjList = new ArrayList<>();
 
        for (int i = 0; i < n; i++) {
            adjList.add(new ArrayList<>());
        }
 
        // add edges to the undirected graph
        for (Edge edge: edges)
        {
            int src = edge.source;
            int dest = edge.dest;
 
            adjList.get(src).add(dest);
            adjList.get(dest).add(src);
        }
    }
}
 
class Main
{
    // Perform BFS recursively on the graph
    public static void recursiveBFS(Graph graph, Queue<Integer> q,
                                    boolean[] discovered)
    {
        if (q.isEmpty()) {
            return;
        }
 
        // dequeue front node and print it
        int v = q.poll();
        System.out.print(v + " ");
 
        // do for every edge (v, u)
        for (int u: graph.adjList.get(v))
        {
            if (!discovered[u])
            {
                // mark it as discovered and enqueue it
                discovered[u] = true;
                q.add(u);
            }
        }
 
        recursiveBFS(graph, q, discovered);
    }
 
    public static void main(String[] args)
    {
        // List of graph edges as per the above diagram
        List<Edge> edges = Arrays.asList(
                new Edge(1, 2), new Edge(1, 3), new Edge(1, 4), new Edge(2, 5),
                new Edge(2, 6), new Edge(5, 9), new Edge(5, 10), new Edge(4, 7),
                new Edge(4, 8), new Edge(7, 11), new Edge(7, 12)
                // vertex 0, 13, and 14 are single nodes
        );
 
        // total number of nodes in the graph (labelled from 0 to 14)
        int n = 15;
 
        // build a graph from the given edges
        Graph graph = new Graph(edges, n);
 
        // to keep track of whether a vertex is discovered or not
        boolean[] discovered = new boolean[n];
 
        // create a queue for doing BFS
        Queue<Integer> q = new ArrayDeque<>();
 
        // Perform BFS traversal from all undiscovered nodes to
        // cover all connected components of a graph
        for (int i = 0; i < n; i++)
        {
            if (discovered[i] == false)
            {
                // mark the source vertex as discovered
                discovered[i] = true;
 
                // enqueue source vertex
                q.add(i);
 
                // start BFS traversal from vertex `i`
                recursiveBFS(graph, q, discovered);
            }
        }
    }
}


------------------------------------------------------------------

Depth First Search (DFS)

Find first `k` maximum occurring words in a given set of strings

Input:
 
keys = [code, coder, coding, codable, codec, codecs, coded, codeless, codec, codecs, codependence, codex, codify, codependents, codes, code, coder, codesign, codec, codeveloper, codrive, codec, codecs, codiscovered]
 
k = 4
 
Output:
 
codec occurs 4 times
codecs occurs 3 times
code occurs 2 times
coder occurs 2 times

import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;
 
// A class to store a Trie node
class Trie
{
    // `count` and `key` will be set only for leaf nodes
    // `key` stores the string, and `count` stores its frequency so far
    int count = 0;
    String key = null;
 
    // each node stores a map to its child nodes
    Map<Character, Trie> character = new HashMap<>();
}
 
// A class to store a heap node
class Node implements Comparable
{
    String key;
    int count;
 
    // constructor
    Node(String key, int count)
    {
        this.key = key;
        this.count = count;
    }
 
    @Override
    public int compareTo(Object o)
    {
        Node node = (Node)o;
        return count - node.count;
    }
}
 
class Main
{
    // Iterative function to insert a string into a Trie
    private static void insert(Trie head, String str)
    {
        // start from the root node
        Trie curr = head;
 
        for (char c: str.toCharArray())
        {
            // create a new node if the path doesn't exist
            curr.character.putIfAbsent(c, new Trie());
 
            // go to the next node
            curr = curr.character.get(c);
        }
 
        // store key and its count in leaf nodes
        curr.key = str;
        curr.count += 1;
    }
 
    // Function to perform preorder traversal on Trie and insert
    // each distinct key along with its count in max-heap
    private static void preorder(Trie curr, PriorityQueue<Node> pq)
    {
        // base condition
        if (curr == null) {
            return;
        }
 
        for (var entry: curr.character.entrySet())
        {
            // if a leaf node is reached (leaf nodes have a non-zero count),
            // push the key with its frequency in max-heap
            if (entry.getValue().count != 0) {
                pq.add(new Node(entry.getValue().key, entry.getValue().count));
            }
 
            // recur for current node's children
            preorder(entry.getValue(), pq);
        }
    }
 
    // Function to find first k–maximum occurring words in a given
    // list of strings
    public static void findKfrequentWords(String[] dict, int k)
    {
        // insert all keys into a Trie and maintain each key
        // frequency in Trie's leaf nodes
        Trie head = new Trie();
        for (String word: dict) {
            insert(head, word);
        }
 
        // create an empty max-heap
        PriorityQueue<Node> pq = new PriorityQueue<>(Comparator.reverseOrder());
 
        // perform preorder traversal on given Trie and push each
        // unique key with its frequency in max-heap
        preorder(head, pq);
 
        // run till max-heap becomes empty or `k` keys are printed
        while (k-- > 0 && !pq.isEmpty())
        {
            // extract the maximum node from the max-heap
            Node max = pq.poll();
 
            // print the maximum occurring element with its count
            System.out.println(max.key + " occurs " + max.count + " times");
        }
    }
 
    public static void main (String[] args)
    {
        // given set of keys
        String[] dict =
        {
            "code", "coder", "coding", "codable", "codec", "codecs", "coded",
            "codeless", "codec", "codecs", "codependence", "codex", "codify",
            "codependents", "codes", "code", "coder", "codesign", "codec",
            "codeveloper", "codrive", "codec", "codecs", "codiscovered"
        };
 
        int k = 4;
 
        findKfrequentWords(dict, k);
    }
}

----------------------------------------------------------------------


Minimum number of deletions and insertions to transform one string into another

Input : 
str1 = "geeksforgeeks", str2 = "geeks"
Output : 
Minimum Deletion = 8
Minimum Insertion = 0   


// Dynamic Programming Java implementation
// to find minimum number of deletions and
// insertions
import java.io.*;
 
class GFG {
 
    // Returns length of length common
    // subsequence for str1[0..m-1],
    // str2[0..n-1]
    static int lcs(String str1, String str2, int m, int n)
    {
        int L[][] = new int[m + 1][n + 1];
        int i, j;
 
        // Following steps build L[m+1][n+1] in
        // bottom up fashion. Note that L[i][j]
        // contains length of LCS of str1[0..i-1]
        // and str2[0..j-1]
        for (i = 0; i <= m; i++) {
            for (j = 0; j <= n; j++) {
                if (i == 0 || j == 0)
                    L[i][j] = 0;
 
                else if (str1.charAt(i - 1)
                         == str2.charAt(j - 1))
                    L[i][j] = L[i - 1][j - 1] + 1;
 
                else
                    L[i][j] = Math.max(L[i - 1][j],
                                       L[i][j - 1]);
            }
        }
 
        // L[m][n] contains length of LCS
        // for X[0..n-1] and Y[0..m-1]
        return L[m][n];
    }
 
    // function to find minimum number
    // of deletions and insertions
    static void printMinDelAndInsert(String str1,
                                     String str2)
    {
        int m = str1.length();
        int n = str2.length();
 
        int len = lcs(str1, str2, m, n);
 
        System.out.println("Minimum number of "
                           + "deletions = ");
        System.out.println(m - len);
 
        System.out.println("Minimum number of "
                           + "insertions = ");
        System.out.println(n - len);
    }
 
    // Driver code
    public static void main(String[] args)
    {
        String str1 = new String("heap");
        String str2 = new String("pea");
       
          // Function Call
        printMinDelAndInsert(str1, str2);
    }
}
// This code is contributed by Prerna Saini



